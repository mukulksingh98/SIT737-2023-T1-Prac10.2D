# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "master" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: my-cluster    
  GKE_ZONE: australia-southeast1   
  DEPLOYMENT_NAME: gke-test 
  IMAGE: static-site

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Test, Publish, and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
          node-version: 14
          
    - name: Install Dependencies
      run: npm ci
      
    - name: Run Tests
      run: npm test
    
    - name: Set up Google Cloud CLI
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GKE_SA_KEY }}
      
    - name: Build Docker Image
      run: docker build -t gcr.io/${{ env.PROJECT_ID }}/sit737:latest .

    - name: GET GKE Credentials and Configure Docker Environment
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}
        gcloud auth configure-docker
        
    - name: Push Docker Image
      run: |
        docker push gcr.io/${{ env.PROJECT_ID }}/sit737:latest
        
    - name: Deploy to GKE
      run: |
        sed -i "s/{TAG}/$GITHUB_SHA/g" deployment.yaml
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml 
        
#     - name: Set up GKE credentials
#       uses: google-github-actions/get-gke-credentials@v0
#       with:
#         cluster_name: ${{ env.GKE_CLUSTER }}
#         location: ${{ env.GKE_ZONE }}
#     - name: Build Docker Image
#       run: docker build -t gcr.io/${{ env.PROJECT_ID }}/your-app:${{ github.sha }} .
    # Configure Workload Identity Federation and generate an access token.
#     - id: 'auth'
#       name: 'Authenticate to Google Cloud'
#       uses: 'google-github-actions/auth@v0'
#       with:
#         token_format: 'access_token'
#         workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
#         service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    # - id: 'auth'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

#     - name: Docker configuration
#       run: |-
#         echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    
#       Get the GKE credentials so we can deploy to the cluster
   

    # Build the Docker image
#     - name: Build
#       run: |-
#         docker build \
#           --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
#           --build-arg GITHUB_SHA="$GITHUB_SHA" \
#           --build-arg GITHUB_REF="$GITHUB_REF" \
#           .
#     # Push the Docker image to Google Artifact Registry
#     - name: Publish
#       run: |-
#         docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
#     # Set up kustomize
#     - name: Set up Kustomize
#       run: |-
#         curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#         chmod u+x ./kustomize
#     # Deploy the Docker image to the GKE cluster
#     - name: Deploy
#       run: |-
#         # replacing the image name in the k8s template
#         ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
#         ./kustomize build . | kubectl apply -f -
#         kubectl rollout status deployment/$DEPLOYMENT_NAME
#         kubectl get services -o wide
